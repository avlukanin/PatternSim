using System;
using System.Collections.Generic;
using System.Text;
using CommandLine;
using System.IO;
using AuthecoLib;

namespace AuthecoConsole {
    
    //////////////////////////////////////////////////////////////////////////////////////////
    public class PatternSimRerankCommand : Command2 {
        protected override void init() {
            name = "patternsim-rank";
            desc = "  A tool for computing semantic similarity.";
			alpha = 15;
			beta = 2;			
			patternSqrt = true;
		}

        [Option("p", "pairs",
        	Required = true,
            HelpText = "An UTF-8 encoded CSV file in provided by the PattenSim program. In the format: " + 
		    	"'target;relatum;syno;cohypo;hyper_hypo;hyper;hypo;sum;pattern1;pattern2;pattern3;pattern4;pattern5;pattern6;pattern7;pattern8;pattern9;pattern10;pattern11;pattern12;pattern13;pattern14;pattern15;pattern16;pattern17'. " +
                "This file must contain symmetric relations between words (generated by the PatternSim by default)." +
                "If there exist a relation 'target;relatum;type;sim' then there should exist one and only one " +
                "relation 'relatum;target;type;sim' in the same file.")]
        public string input{ get; set; }

		[Option("c", "corpusfreq",
	        Required = true,
            HelpText = "An UTF-8 encoded CSV file 'word;freq' with frequencies of words.")]
        public string corpusFreq{ get; set; }
	
        [Option("o", "output",
                Required = true,
                HelpText = "An UTF-8 encoded CSV file 'target;relatum;sim', where 'sim' is similarity score between 'target' and 'relatum'.")]
        public string output{ get; set; }

        [Option("t", "type",
                Required = true,
		        HelpText = "Type of reranking: \n" +
		          	"  1 -- Efreq, no reranking, transform scores to the interval [0;1].\n" +
		          	"  2 -- Efreq-Rfreq, reranking by frequency of relations to other words. Uses option 'alpha'.\n" +
		          	"  3 -- Efreq-Rnum, reranking by number of relations to other words. Uses option 'beta'.\n" +
		          	"  4 -- Efreq-Cfreq, reranking by word frequency. Uses option 'corpusfreq'.\n" +
		          	"  5 -- Efreq-Rnum-Cfreq, reranking by number of relations to other words and by word frequency. " +
		          	" Uses options 'beta' and 'corpusfreq'.\n" +
		          	"  6 -- Efreq-Rnum-Cfreq-Pnum, reranking by number of relations to other words, by word frequency " +
		          	"and by number of different patterns extracted the relations. Uses options 'corpusfreq', 'patterns', 'beta' and 'sqrt'.")]
        public int norm { get; set; }
		

		[Option("a", "alpha",
                Required = false,		         
		        HelpText = "Expected number of relations per word, default -- 15.")]
        public int alpha { get; set; }
		
		[Option("b", "beta",
                Required = false,		         
		        HelpText = "Minimum number of extractions which establish a relation between words, default -- 2.")]
        public int beta { get; set; }

		[Option("s", "sqrt",
                Required = false,		         
		        HelpText = "Sqrt of the number of different patterns, default -- true.")]
        public bool patternSqrt { get; set; }

        protected override void run() {
			// Check input arguments
			bool wrongAlpha = (alpha <= 0);
			bool wrongBeta = (beta < 0);
			bool wrongInput = (!File.Exists(input));
			bool wrongCfreq = (!File.Exists(corpusFreq));
			
			if(wrongAlpha || wrongBeta || wrongInput || wrongCfreq){
				Console.WriteLine("Wrong input arguments.");
				return;
			}

			// Load relations 
			RelationsCollection relations = new RelationsCollection(input, false);
						
			// Rerank relations
			switch(norm) {
				case 1:
					relations.rerankEfreq();
					break;
				case 2:
					relations.rerankEfreqRfreq(alpha);
					break;                
				case 3: 
					relations.rerankEfreqRnum(beta);
					break;
				case 4:
					relations.rerankEfreqCfreq(corpusFreq, beta);
					break;
				case 5:
					relations.rerankEfreqCfreqRnum(corpusFreq, beta);
					break;
				case 6:
					relations.rerankEfreqCfreqRnum(corpusFreq, beta);
					//relations.multiplyPnum(patternsFreq, patternSqrt);
					break;
				default:
					Console.WriteLine("Unknown reranking type '{0}' -- using 1 (Efreq).", norm);
					relations.rerankEfreq();
                	break;
            }      
			
			relations.save(output, false, true);
        }
    }        
}
